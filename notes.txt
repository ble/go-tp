Structure of the client-side:

Client-Passive
Model
Client-Active
UI


Active client requests game state, creates model, starts passive client
passive client polls / websockets for game state updates and mutates the model



Client
  Active (part of client interface)
  Passive (owned by client)
  Game model (owned by client)
  Wiring (owned by client?) that processes passive client events into game model updates


Active client interface:
  GetGameState()
  GetStack()
  GetDrawing()
  AppendToDrawing()
  PassStack()
  Chat()

ALL OF THESE RETURN RESULTS



OUTSTANDING IMPLEMENTATION/CONVENIENCE ISSUES:
  + Putting a prepared statement together with its defining SQL to avoid code
    duplication.
  + Better testing functionality for constructing HTTP requests and verifying
    HTTP responses


GAME CLIENT:
  How should we set up our fancy-dancy game client UI?
  Decorate... stuff...
    .game-title <-- name of game
    .status-container <-- status
    .chat-container <-- chat lines
    .drawing-container <-- canvas, etc.


