An incomplete drawing can only be accessed by the user who is drawing it.
A complete drawing in an incomplete stack can only be accessed by a user who
drew a picture in that stack.
A complete drawing in a complete stack can be accessed by anyone.


Other things:
  wiring up handlers for this new persistence model / ensuring consistent
concurrent access
  putting a prepared statement together with its defining SQL in one place to
avoid duplication



PROBLEM: putting logic into handlers.  Handlers should just be forwarding
things on to the "room service" (lol)

So, I guess this shit has layers like this:

SWITCHBOARD:
    url to handler / object to url mapping
HANDLER:
    calls to room,
    takes care of http-specific logic
ROOM:
    synchronizes access to model objects,
    enforces/applies game logic,
    produces game events
PERSISTENCE:
    provides access to model objects


So how and where are we going to generate the JSON used for describing events
and game objects?


EVENTS:
join game
pass stack
chat
start game
complete game
  --all these guys are going to be POSTed in as JSON
  --the JSON will be unmarshalled and processed as action{} objects
  --any additional fields will get filled in by processing of the room
  --and that will get passed out through the events

OBJECTS:
game state
stack
drawing
