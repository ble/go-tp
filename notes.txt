What's our major malfunction here?
Stacks and drawings should have unique URLs.
The mapping from drawing or stack to URL should not be ad-hoc; it should be
an interface specified _somewhere_.

What is this interface going to look like or what will it mean?

More generically than just a drawing or a stack, this interface is going
to provide URLs for objects that encapsulate a resource.

So... Locator?

Yarp, I like this general idea.  Not sure that Locator is the right idea...
The idea is an interface for objects that can be fetched by URL that being a

Uniform
Resource
Locator

One idea is to have objects that can give you their own URL; they can provide
their own Locator / they can tell you where to find themselves.

Another idea is to have an object (really, just a function) that maps from
objects to the URL at which to find them.  This is more appealing, in my mind.


Why is it more appealing?

1) Providing a URL for Monsieur J. Random Object: might be the good Monsieur's
job but it would probably be better provided by some other service.  

2) Symmetry: this is something like the dual of a router:

URL of HTTP request        ==(router)---> Function used to process request
Object accessible via http --(locator)==> URL used to access object

Or, with arrows flopping:
URL of HTTP request        ===(router)---> Function used to process request
URL used to access object  <==(locator)--- Object accessible via http 

Not sure exactly how, but it seems like the router and locator in some cases
need each other, perhaps as bad as peanut butter and chocolate need each
other; the class of problem occurs when one HTTP response makes reference to
some other URL on the same server but there is no trivial way to verify that
such a URL actually exists / will do something for you.

One can do a trivial test, then, I guess, by taking the URL generated by the
locator and sending it to the router, saying, "hey, does this look like a
thing to you?"  This is an internal consistency check, I guess; something
helpful in debug mode... but merely structuring the code in such a fashion
that it can be checked like this is a better way of ensuring that one can get
URLs to objects and that those URLs really mean things; it takes advantage of
the duality and could allow you to define the forward and reverse mapping in
one place(?) which really beats the shit out of the ad-hoc alternative.


Hokay, explicit duality solves that problem.  Next problem.
