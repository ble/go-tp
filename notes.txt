What's our major malfunction here?
Stacks and drawings should have unique URLs.
The mapping from drawing or stack to URL should not be ad-hoc; it should be
an interface specified _somewhere_.

What is this interface going to look like or what will it mean?

More generically than just a drawing or a stack, this interface is going
to provide URLs for objects that encapsulate a resource.

So... Locator?


PERSISTENCE:
start with https://github.com/mattn/go-sqlite3

So we've been thinking about how the data will be structured on the database side.

There are at least two other ideas to consider:
  * when will data be persisted and read?
  * what interface will be presented by the persistence system?


One half-baked idea:

There is an object/service for each of the main domain object types and most behavior is methods on that handle
Not strictly necessary; could return objects that hold ref / their methods make things work

I'd rather not have to think about what's going on at the persistence level as I do bizness,
at least I'd like to think the least possible about what's going on; few, strong assumptions about behavior

Only users and games can be created outside of a game's execution;
everything modified is modified in a game
A game's execution guarantees single-threaded behavior
so... basically everything is safe
