okay, now I've got some pretty decent stuff going on

the current glue code is not so well organized, though

first of all, it's living in the HTML page itself
second of all, its structure has not been carefully thought out
third, there's something more than a little inconvenient about present data
access with long-ass stuff like
`game.myPlayer().stacksHeld()[0].id()`
game.myPlayer().stacksHeld()[0].fetchState();
var drawingId = game.myPlayer().stacksHeld()[0].drawings()[0].id();
client.appendToDrawing(drawingId, {'trouble':'incoming'});
`
but it's not clear that's a real liability


What code lives there right now?

convenient namespacing
initializing `client` with correct URL
initializing `game` with client
starting `comet`
sends a test chat
definition of PassiveHandler
creation of PassiveHandler
coupling of PassiveHandler to comet
diagnostic listening to game events

call to `game.fetchState()`
coupling `game.fetchState()` success to starting of comet loop

making the following happen in an appropriate, async fashion,
keyed off of the `fetchState` success:
  start the game if it hasn't been started
  fetch the contents of the first stack player is holding
  fetch the contents of the top drawing in that stack

A fair amount of that code really needs to be put in a unified location
that is not directly coupled to UI;

I think the combination of CLIENT, PASSIVE CLIENT, and MODEL should be
considered to be the state of the SERVER as perceived by the browser

so maybe call the thing Server or ServerInterface?
ugh, not that cool
