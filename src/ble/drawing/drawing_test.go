package drawing

import (
	"encoding/json"
	. "testing"
)

func TestMarshal(t *T) {
	cases := []struct {
		Input  Rgba
		Output string
	}{
		{rgba(255, 255, 255, 1.0), "\"rgba(255,255,255,1.00)\""},
	}
	for _, v := range cases {
		bytes, _ := json.Marshal(v.Input)
		if string(bytes) != v.Output {
			t.Error(v.Input, "marshalled =>", string(bytes), "; expected", v.Output)
		}
		t.Log(v.Input, "marshalled =>", string(bytes))
	}
}

func TestUnmarshal(t *T) {
	cases := []struct {
		Input  string
		Output Rgba
	}{
		{"\"rgba(255,255,255,1.00)\"", rgba(255, 255, 255, 1.0)},
	}
	for _, v := range cases {
		var color Rgba
		err := json.Unmarshal([]byte(v.Input), &color)
		if err != nil {
			t.Error(err)
			continue
		}
		if color != v.Output {
			t.Error(v.Input, "unmarshalled =>", color, "; expected", v.Output)
		}
		t.Log(v.Input, "unmarshalled =>", color)
	}

	testDrawParts := []string{`{
    "_tag":"ble._2d.PolylineReplay",
    "coordinates":[336,34,336,34,337,34,340,34,346,34,356,36,365,39,372,40,380,42,386,43,392,44,398,45,402,46,406,48,409,49,413,50,415,50,418,50,421,50,425,50,426,50,428,50,429,50,431,50,432,50,434,50,435,50,436,50,438,51,440,53,443,54,445,55,447,56,450,58,451,58,452,58,452,58,454,58,455,58,456,58,461,64,469,73,488,94,499,102,509,112,510,114,511,115,512,115,513,115,513,116,515,118,516,119,518,121,519,121,519,122,520,123,521,127,523,128,523,129,524,131,525,133,525,133,525,133,526,136,526,142,526,148,534,168,540,184,545,195,546,204,547,208,548,211,548,215,548,219,548,220,548,221,548,222,548,222,548,222,548,224,548,226,548,232,548,246,549,255,549,262,549,269,549,275,549,277,549,283,549,288,549,293,549,296,549,300,549,304,549,309,549,312,549,315,549,317,549,319,549,321,549,322,549,324,549,325,550,327,550,328,551,329,551,331,551,333,552,334,552,335,552,336,552,336,551,336,550,337,548,339,543,342,536,347,530,350,523,355,514,361,510,366,504,371,502,377,499,381,497,385,496,389,495,390,494,393,493,397,492,400,491,402,489,404,489,406,488,407,487,408,487,409,487,410,487,410,485,410,483,410,479,412,475,414,455,418,441,421,416,424,406,425,390,428,383,431,376,432,371,433,364,434,359,434,354,434,353,434,352,434,349,435,347,435,345,435,344,435,344,435,341,435,336,435,330,435,324,435,312,435,289,436,278,436,269,436,255,436,249,435,244,435,238,434,236,434,236,434,236,433,236,433,235,433,233,433,229,432,224,430,202,421,191,414,176,403,170,398,160,391,157,389,151,385,151,384,150,384,150,383,149,382,149,381,149,380,149,380,148,379,145,374,142,367,132,335,125,300,123,279,122,270,122,268,122,266,122,265,122,265,121,261,119,256,115,249,111,235,111,218,112,198,115,187,116,177,120,164,124,153,125,147,127,143,127,143,127,142,128,135,130,127,132,120,136,108,139,99,143,92,147,86,151,82,155,79,159,75,162,74,166,73,168,72,170,72,171,72,173,72,173,71,174,71,174,71,177,70,182,68,190,63,201,58,212,54,223,50,230,49,236,48,241,46,247,44,251,43,255,41,259,39,264,38,267,37,270,34,274,34,277,33,281,33,284,33,287,33,289,33,291,33,291,32,292,32,292,32,293,32,296,32,297,32,299,32,303,32,304,32,306,32,307,32,308,32,309,32,310,32,314,32,316,32,318,32,320,32,321,32,323,32,324,32,324,32,325,32,326,32,327,32,328,32,328,31,329,31,330,31,331,31,331,31,331,32,332,32,332,33,332,33,332,33,332,33,332,33],
    "startTime":0,
    "times":[0,0,139,155,173,190,206,225,239,256,273,290,308,323,342,359,373,392,408,442,456,492,509,541,558,573,591,608,625,642,658,674,690,725,743,775,988,1001,1117,1135,1159,1177,1209,1227,1259,1277,1294,1311,1328,1344,1361,1377,1400,1434,1459,1493,1526,1560,1593,1627,1660,1694,1886,2018,2033,2060,2093,2127,2162,2195,2199,2227,2262,2296,2328,2362,2396,2429,2626,2751,2767,2796,2830,2833,2850,2867,2883,2900,2917,2933,2950,2967,2983,3000,3016,3033,3050,3067,3083,3100,3117,3133,3150,3166,3183,3200,3216,3233,3250,3267,3283,3470,3667,3684,3701,3717,3733,3751,3766,3784,3800,3816,3833,3849,3869,3880,3897,3914,3930,3946,3967,3983,4000,4015,4033,4050,4196,4380,4513,4531,4550,4569,4602,4619,4650,4669,4700,4718,4735,4752,4770,4786,4817,4834,4853,4871,4886,4917,4935,5162,5296,5314,5335,5354,5371,5402,5422,5438,5469,5488,5505,5535,5554,5614,5629,5822,5946,5963,5987,6007,6037,6057,6088,6107,6137,6157,6187,6207,6223,6240,6256,6273,6279,6458,6596,6613,6638,6673,6705,6738,6772,6806,6839,6897,7110,7329,7346,7373,7407,7440,7474,7479,7507,7542,7575,7609,7641,7834,7997,8012,8030,8046,8063,8079,8096,8113,8129,8145,8163,8181,8200,8223,8237,8253,8270,8279,8296,8526,8662,8680,8696,8712,8728,8746,8763,8779,8795,8813,8829,8848,8866,8885,8891,8909,8929,8945,8962,8977,8996,9012,9029,9046,9062,9302,9509,9526,9546,9565,9596,9616,9646,9675,9698,9717,9733,9763,9781,9800,9816,9846,9864,9893,9908,9941,9959,9980,9999,10017,10048,10067,10098,10160,10242,10309,10375,10742,10935,10937,10937],
    "controls":[1,36,62,78,111,137,159,175,193,204,217,237,263,295,296,297],
    "lineWidth":5,
    "strokeStyle":"rgba(0,0,0,1)",
    "fillStyle":"rgba(255,249,86,1)"
  }`,
		`{
    "_tag":"ble._2d.StrokeReplay",
    "coordinates":[60,245,61,245,63,245,67,243,73,240,80,236,92,232,103,228,117,225,129,224,143,223,157,223,169,223,191,227,215,236,240,249,261,261,279,275,294,289,311,306,323,324,333,337,338,349,342,358,345,369,345,379,345,386,342,392,336,397,329,399,320,399,310,399,303,397,300,394,298,391,297,387,297,384,297,377,306,367,322,357,340,346,353,341,369,337,381,335,392,333,403,330,415,327,426,327,438,327,444,327,447,327,449,327,450,327,451,327,452,327,456,327,462,327,468,327,474,328,473,328,468,331,463,334,456,336,446,339,435,339,423,339,408,332,394,322,386,311,373,294,367,282,362,272,361,265,359,260,354,249,347,232,339,213,334,200,328,183,320,164,316,146,314,137,312,131,312,129,313,134,327,155,342,172,351,182,363,194,376,203,388,209,417,226,443,249,485,287,509,311,515,319,524,329,527,333,527,335,527,335,525,337,515,338,498,338,484,337,466,327,447,316,417,297,394,285,363,271,334,266,309,265,286,266,265,275,246,287,233,294,217,302,210,304,201,305,197,306,193,306,191,304,189,301,188,294,187,287,187,271,191,249,200,226,214,201,233,163,246,143,256,130,266,117,271,113,278,108,284,106,290,105,297,104,304,104,310,104,317,109,326,119,336,135,349,151,360,164,360,164],
    "startTime":0,
    "times":[0,277,295,311,328,344,360,377,394,410,428,444,461,477,495,510,527,544,561,577,595,611,628,644,661,677,694,711,727,744,761,777,795,811,828,844,860,878,894,911,928,944,961,978,995,1011,1027,1045,1060,1078,1094,1111,1128,1144,1161,1177,1194,1211,1227,1393,1411,1427,1444,1460,1478,1494,1511,1527,1544,1560,1578,1594,1611,1627,1644,1660,1678,1694,1711,1727,1744,1761,1777,1794,1827,1844,1856,1874,1890,1907,1923,1940,1956,1974,1990,2007,2023,2040,2056,2090,2106,2123,2139,2156,2173,2189,2206,2223,2239,2256,2273,2289,2306,2323,2340,2356,2373,2390,2406,2423,2440,2456,2473,2490,2506,2523,2540,2556,2574,2590,2607,2623,2640,2657,2674,2689,2707,2723,2740,2757,2774,2790,2807,2823,2874]
  }`,
	}
	for _, v := range testDrawParts {
		var drawPart DrawPart
		err := (&drawPart).FromJSON([]byte(v))
		if err != nil {
			t.Error(err)
		}
		t.Log(drawPart)
	}
}
